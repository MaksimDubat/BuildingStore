version: "3.9"


services:
  userPostgres:
    image: postgres:17
    container_name: userdb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: User    
      POSTGRES_USER: admin        
      POSTGRES_PASSWORD: password 
    networks:
      - mynetwork
    healthcheck:
      test: "pg_isready -U admin"
      interval: 10s
      timeout: 5s
      retries: 5

  productPostgres:
    image: postgres:17
    container_name: productdb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: Product    
      POSTGRES_USER: admin        
      POSTGRES_PASSWORD: password 
    networks:
      - mynetwork
    healthcheck:
      test: "pg_isready -U admin"
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: appdb
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - mynetwork

  users:
    image: userservice:latest
    container_name: users
    ports:
      - "8080:8080"
    networks:
      - mynetwork
    depends_on:
      - userPostgres
      - redis

  products:
    image: productservice:latest
    container_name: products
    ports:
      - "8082:8080"
    networks:
      - mynetwork
    depends_on:
      - productPostgres

  notifications:
    image: notificationservice:latest
    container_name: notifications
    ports:
      - "8081:8080"
    networks:
      - mynetwork
    depends_on:
      - mongo

  gateway:
    image: gateway:latest
    container_name: gateways
    ports:
      - "8000:8000"
    networks:
      - mynetwork
    depends_on:
      - users
      - products
      - notifications

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: "false"
    ports:
      - "9200:9200"
    networks:
      - mynetwork

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    depends_on:
      - elasticsearch
    networks:
      - mynetwork
  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - mynetwork
    depends_on:
      - elasticsearch
    volumes:
      - ./logstash.conf:/logstash/pipeline/logstash.conf:ro 
    environment:
      xpack.monitoring.enabled: "false"
networks:
  mynetwork:
    driver: bridge